---
layout: post
title:  "LLVM Pass 学习笔记"
date:   2021-03-11 23:41:35 +0800
categories: jekyll update
---

## 整体介绍
是对代码进行“优化”的工具。

- 在哪个阶段执行的？

## 编写

### 匿名namespace

### 类与函数
- 几种元素
    - `Module`
    - `Function`
    - `Loop`
    - `Region`
- 继承类`FunctionPass`，`ModulePass`
- 函数`runOnFunction`，`runOnModule`

### 注册

### 运行
`clang`与`opt`

## 示例
一个HelloWorld示例，来自[官网](https://llvm.org/docs/WritingAnLLVMPass.html)
```cpp
#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"

#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"

using namespace llvm;

namespace {
struct Hello : public FunctionPass {
  static char ID;
  Hello() : FunctionPass(ID) {}

  bool runOnFunction(Function &F) override {
    errs() << "Hello: ";
    errs().write_escaped(F.getName()) << '\n';
    return false;
  }
}; // end of struct Hello
}  // end of anonymous namespace

char Hello::ID = 0;
static RegisterPass<Hello> X("hello", "Hello World Pass",
                             false /* Only looks at CFG */,
                             false /* Analysis Pass */);

static RegisterStandardPasses Y(
    PassManagerBuilder::EP_EarlyAsPossible,
    [](const PassManagerBuilder &Builder,
       legacy::PassManagerBase &PM) { PM.add(new Hello()); });

```

## 参考资料


